{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BackendService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = '';\n    this.username = '';\n    this.password = '';\n    this.baseUrl = 'http://localhost:8080/dapp05/empleado';\n    this.username = 'ian';\n    this.password = '123';\n  }\n  getAuthHeaders() {\n    return new HttpHeaders({\n      'Authorization': 'Basic ' + btoa(`${this.username}:${this.password}`),\n      'Content-Type': 'application/json'\n    });\n  }\n  getAll() {\n    console.log('obteniendo todos los datos');\n    const headers = this.getAuthHeaders();\n    let response = this.http.get(this.baseUrl, {\n      headers\n    });\n    return response;\n  }\n  getOne(id) {\n    console.log('obteniendo un dato');\n    const headers = this.getAuthHeaders();\n    let response = this.http.get(`${this.baseUrl}/${id},`, {\n      headers\n    });\n    return response;\n  }\n  post(data) {\n    console.log('enviando un dato');\n    const headers = this.getAuthHeaders();\n    let response = this.http.post(this.baseUrl, data, {\n      headers\n    });\n    return response;\n  }\n  put(data, id) {\n    console.log('actualizando un dato');\n    const headers = this.getAuthHeaders();\n    let response = this.http.put(`${this.baseUrl}/${id}`, data, {\n      headers\n    });\n    return response;\n  }\n  delete(id) {\n    console.log('eliminando un dato');\n    const headers = this.getAuthHeaders();\n    let response = this.http.delete(`${this.baseUrl}/${id}`, {\n      headers\n    });\n    return response;\n  }\n  static #_ = this.ɵfac = function BackendService_Factory(t) {\n    return new (t || BackendService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BackendService,\n    factory: BackendService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","BackendService","constructor","http","baseUrl","username","password","getAuthHeaders","btoa","getAll","console","log","headers","response","get","getOne","id","post","data","put","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/ian/angularProjects/DAPP01Practica06/src/app/backend.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendService {\n\n  baseUrl = ''\n  username = ''\n  password = ''\n\n  constructor(private http: HttpClient) {\n    this.baseUrl = 'http://localhost:8080/dapp05/empleado'\n    this.username = 'ian'\n    this.password = '123'\n  }\n\n  getAuthHeaders(): HttpHeaders{\n    return new HttpHeaders({\n      'Authorization': 'Basic '+ btoa(`${this.username}:${this.password}`),\n      'Content-Type': 'application/json'\n    })\n  }\n\n  getAll(): Observable<any>{\n    console.log('obteniendo todos los datos')\n    const headers = this.getAuthHeaders()\n    let response = this.http.get(this.baseUrl, { headers })\n    return response\n  }\n\n  getOne(id: number): Observable<any>{\n    console.log('obteniendo un dato')\n    const headers = this.getAuthHeaders()\n    let response = this.http.get(`${this.baseUrl}/${id},`, { headers })\n    return response\n  }\n\n  post(data: any): Observable<any>{\n    console.log('enviando un dato')\n    const headers = this.getAuthHeaders()\n    let response = this.http.post(this.baseUrl, data, { headers })\n    return response\n  }\n\n  put(data: any, id: number): Observable<any>{\n    console.log('actualizando un dato')\n    const headers = this.getAuthHeaders()\n    let response = this.http.put(`${this.baseUrl}/${id}`, data, { headers })\n    return response\n  }\n\n  delete(id: number): Observable<any>{\n    console.log('eliminando un dato')\n    const headers = this.getAuthHeaders()\n    let response = this.http.delete(`${this.baseUrl}/${id}`, { headers })\n    return response\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,OAAO,GAAG,EAAE;IACZ,KAAAC,QAAQ,GAAG,EAAE;IACb,KAAAC,QAAQ,GAAG,EAAE;IAGX,IAAI,CAACF,OAAO,GAAG,uCAAuC;IACtD,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,QAAQ,GAAG,KAAK;EACvB;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAIP,WAAW,CAAC;MACrB,eAAe,EAAE,QAAQ,GAAEQ,IAAI,CAAC,GAAG,IAAI,CAACH,QAAQ,IAAI,IAAI,CAACC,QAAQ,EAAE,CAAC;MACpE,cAAc,EAAE;KACjB,CAAC;EACJ;EAEAG,MAAMA,CAAA;IACJC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzC,MAAMC,OAAO,GAAG,IAAI,CAACL,cAAc,EAAE;IACrC,IAAIM,QAAQ,GAAG,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,IAAI,CAACV,OAAO,EAAE;MAAEQ;IAAO,CAAE,CAAC;IACvD,OAAOC,QAAQ;EACjB;EAEAE,MAAMA,CAACC,EAAU;IACfN,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,MAAMC,OAAO,GAAG,IAAI,CAACL,cAAc,EAAE;IACrC,IAAIM,QAAQ,GAAG,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,GAAG,IAAI,CAACV,OAAO,IAAIY,EAAE,GAAG,EAAE;MAAEJ;IAAO,CAAE,CAAC;IACnE,OAAOC,QAAQ;EACjB;EAEAI,IAAIA,CAACC,IAAS;IACZR,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAC/B,MAAMC,OAAO,GAAG,IAAI,CAACL,cAAc,EAAE;IACrC,IAAIM,QAAQ,GAAG,IAAI,CAACV,IAAI,CAACc,IAAI,CAAC,IAAI,CAACb,OAAO,EAAEc,IAAI,EAAE;MAAEN;IAAO,CAAE,CAAC;IAC9D,OAAOC,QAAQ;EACjB;EAEAM,GAAGA,CAACD,IAAS,EAAEF,EAAU;IACvBN,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,MAAMC,OAAO,GAAG,IAAI,CAACL,cAAc,EAAE;IACrC,IAAIM,QAAQ,GAAG,IAAI,CAACV,IAAI,CAACgB,GAAG,CAAC,GAAG,IAAI,CAACf,OAAO,IAAIY,EAAE,EAAE,EAAEE,IAAI,EAAE;MAAEN;IAAO,CAAE,CAAC;IACxE,OAAOC,QAAQ;EACjB;EAEAO,MAAMA,CAACJ,EAAU;IACfN,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,MAAMC,OAAO,GAAG,IAAI,CAACL,cAAc,EAAE;IACrC,IAAIM,QAAQ,GAAG,IAAI,CAACV,IAAI,CAACiB,MAAM,CAAC,GAAG,IAAI,CAAChB,OAAO,IAAIY,EAAE,EAAE,EAAE;MAAEJ;IAAO,CAAE,CAAC;IACrE,OAAOC,QAAQ;EACjB;EAAC,QAAAQ,CAAA,G;qBApDUpB,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdzB,cAAc;IAAA0B,OAAA,EAAd1B,cAAc,CAAA2B,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}